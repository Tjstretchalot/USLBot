package me.timothy.bots.memory;

import java.util.ArrayList;
import java.util.List;

import me.timothy.bots.models.BanHistory;
import me.timothy.bots.models.MonitoredSubreddit;

/**
 * This class is used by the USLBanHistoryPropagator to describe
 * what actions should be taken as a result of a banhistory.
 * 
 * This result was generated by only considering one subreddit, but
 * the consequences may be greater depending on how complex the 
 * propagator has become.
 * 
 * Note that the propagate result should only be the result of ONE
 * monitored subreddit and ITS configuration with regard to ONE 
 * ban that occurred.
 * 
 * @author Timothy
 */
public class BanHistoryPropagateResult {
	
	/**
	 * Which subreddit was considered when creating this result.
	 * Not null.
	 */
	public final MonitoredSubreddit subreddit;
	
	/**
	 * Which ban history was considered when creating this result.
	 * Not null.
	 */
	public final BanHistory banHistory;
	
	/**
	 * The list of bans that should take place due to this one.
	 * Not null.
	 */
	public final List<UserBanInformation> bans;
	
	/** 
	 * The list of pms that should be sent to subreddits.
	 * Not null. 
	 */
	public final List<ModmailPMInformation> modmailPMs;
	
	/** 
	 * The list of pms that should be sent to Persons. 
	 * Not null.
	 */
	public final List<UserPMInformation> userPMs;

	/**
	 * @param subreddit subreddit was considered to create this
	 * @param banHistory action that was considered to create this
	 * @param bans the bans that need to occur because of this
	 * @param modmailPMs the modmail pms that need to occur because of this
	 * @param userPMs the users to pm because of this
	 */
	public BanHistoryPropagateResult(MonitoredSubreddit subreddit, BanHistory banHistory, List<UserBanInformation> bans,
			List<ModmailPMInformation> modmailPMs, List<UserPMInformation> userPMs) {
		this.subreddit = subreddit;
		this.banHistory = banHistory;
		this.bans = bans;
		this.modmailPMs = modmailPMs;
		this.userPMs = userPMs;
	}

	/**
	 * Create a ban history propagate result that does nothing
	 * 
	 * @param subreddit the subreddit that was considered
	 * @param banHistory the ban history that was considered
	 */
	public BanHistoryPropagateResult(MonitoredSubreddit subreddit, BanHistory banHistory) {
		this(subreddit, banHistory, new ArrayList<>(), new ArrayList<>(), new ArrayList<>());
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((banHistory == null) ? 0 : banHistory.hashCode());
		result = prime * result + ((bans == null) ? 0 : bans.hashCode());
		result = prime * result + ((modmailPMs == null) ? 0 : modmailPMs.hashCode());
		result = prime * result + ((subreddit == null) ? 0 : subreddit.hashCode());
		result = prime * result + ((userPMs == null) ? 0 : userPMs.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BanHistoryPropagateResult other = (BanHistoryPropagateResult) obj;
		if (banHistory == null) {
			if (other.banHistory != null)
				return false;
		} else if (!banHistory.equals(other.banHistory))
			return false;
		if (bans == null) {
			if (other.bans != null)
				return false;
		} else if (!bans.equals(other.bans))
			return false;
		if (modmailPMs == null) {
			if (other.modmailPMs != null)
				return false;
		} else if (!modmailPMs.equals(other.modmailPMs))
			return false;
		if (subreddit == null) {
			if (other.subreddit != null)
				return false;
		} else if (!subreddit.equals(other.subreddit))
			return false;
		if (userPMs == null) {
			if (other.userPMs != null)
				return false;
		} else if (!userPMs.equals(other.userPMs))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "BanHistoryPropagateResult [subreddit=" + subreddit + ", banHistory=" + banHistory + ", bans=" + bans
				+ ", modmailPMs=" + modmailPMs + ", userPMs=" + userPMs + "]";
	}
	
	
}
