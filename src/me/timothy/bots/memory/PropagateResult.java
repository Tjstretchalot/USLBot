package me.timothy.bots.memory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import me.timothy.bots.models.TraditionalScammer;
import me.timothy.bots.models.USLAction;

/**
 * This class is used by the USLPropagator to describe
 * what actions should be taken as a result of a handled mod action.
 * 
 * This result was generated by only considering one subreddit, but
 * the consequences may be greater depending on how complex the 
 * propagator has become.
 * 
 * Note that the propagate result should only be the result of ONE
 * monitored subreddit and ITS configuration with regard to ONE 
 * action that occurred.
 * 
 * @author Timothy
 */
public class PropagateResult {
	/***
	 * The action that was considered.
	 * Not null.
	 */
	public final USLAction action;
	
	/**
	 * The list of bans that should take place due to this one.
	 * Not null.
	 */
	public final List<UserBanInformation> bans;
	
	/**
	 * What unbans, if any, need to be performed as a result of this action.
	 * Not null
	 */
	public final List<UserUnbanInformation> unbans;
	
	/** 
	 * The list of pms that should be sent to subreddits.
	 * Not null. 
	 */
	public final List<ModmailPMInformation> modmailPMs;
	
	/** 
	 * The list of pms that should be sent to Persons. 
	 * Not null.
	 */
	public final List<UserPMInformation> userPMs;
	
	/**
	 * What users to remove from the traditional scammers table.
	 */
	public final List<TraditionalScammer> scammersToRemove;

	/**
	 * @param action the usl action that was considered
	 * @param bans the bans that need to occur
	 * @param unbans the unbans that need to occur
	 * @param modmailPMs the modmail pms that need to be sent
	 * @param userPMs the user pms that need to be sent
	 * @param scammersToRemove the users that should be removed from the traditional list
	 */
	public PropagateResult(USLAction action, List<UserBanInformation> bans,
			List<UserUnbanInformation> unbans, List<ModmailPMInformation> modmailPMs, 
			List<UserPMInformation> userPMs, List<TraditionalScammer> scammersToRemove) {
		this.action = action;
		this.bans = bans;
		this.unbans = unbans;
		this.modmailPMs = modmailPMs;
		this.userPMs = userPMs;
		this.scammersToRemove = scammersToRemove;
	}
	
	/**
	 * @param action the usl action that was considered
	 * @param bans the bans that need to occur because of this
	 * @param unbans the unbans that need to occur
	 * @param modmailPMs the modmail pms that need to occur because of this
	 * @param userPMs the users to pm because of this
	 */
	public PropagateResult(USLAction action, List<UserBanInformation> bans,
			List<UserUnbanInformation> unbans, List<ModmailPMInformation> modmailPMs, 
			List<UserPMInformation> userPMs) {
		this(action, bans, unbans, modmailPMs, userPMs, Collections.emptyList());
	}

	/**
	 * Create a ban history propagate result that does nothing
	 * 
	 * @param action the action that was considered
	 */
	public PropagateResult(USLAction action) {
		this(action, Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList());
	}
	
	/**
	 * Create a new propagation result that is this one merged with the other one. This
	 * is optimized for the case where one propagate result is fairly empty.
	 * 
	 * @param other the propagation result to merge with
	 * @return this result combined with the other result.
	 */
	public PropagateResult merge(PropagateResult other) {
		List<UserBanInformation> newBans;
		List<UserUnbanInformation> newUnbans;
		List<ModmailPMInformation> newModPMs;
		List<UserPMInformation> newUserPMs;
		List<TraditionalScammer> newScammers;
		
		if(bans.isEmpty()) {
			newBans = other.bans;
		}else if(other.bans.isEmpty())
		{
			newBans = bans;
		}else {
			newBans = new ArrayList<>(bans.size() + other.bans.size());
			newBans.addAll(bans);
			newBans.addAll(other.bans);
		}
		
		if(unbans.isEmpty()) {
			newUnbans = other.unbans;
		}else if(other.unbans.isEmpty()) {
			newUnbans = unbans;
		}else {
			newUnbans = new ArrayList<>(unbans.size() + other.unbans.size());
			newUnbans.addAll(unbans);
			newUnbans.addAll(other.unbans);
		}
		
		if(modmailPMs.isEmpty()) {
			newModPMs = other.modmailPMs;
		}else if(other.modmailPMs.isEmpty()) {
			newModPMs = modmailPMs;
		}else {
			newModPMs = new ArrayList<>(modmailPMs.size() + other.modmailPMs.size());
			newModPMs.addAll(modmailPMs);
			newModPMs.addAll(other.modmailPMs);
		}
		
		if(userPMs.isEmpty()) {
			newUserPMs = other.userPMs;
		}else if(other.userPMs.isEmpty()) {
			newUserPMs = userPMs;
		}else {
			newUserPMs = new ArrayList<>(userPMs.size() + other.userPMs.size());
			newUserPMs.addAll(userPMs);
			newUserPMs.addAll(other.userPMs);
		}
		
		if(scammersToRemove.isEmpty()) {
			newScammers = other.scammersToRemove;
		}else if(other.scammersToRemove.isEmpty()) {
			newScammers = scammersToRemove;
		}else {
			newScammers = new ArrayList<>(scammersToRemove.size() + other.scammersToRemove.size());
			newScammers.addAll(scammersToRemove);
			newScammers.addAll(other.scammersToRemove);
		}
		
		return new PropagateResult(action, newBans, newUnbans, newModPMs, newUserPMs, newScammers);
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((action == null) ? 0 : action.hashCode());
		result = prime * result + ((bans == null) ? 0 : bans.hashCode());
		result = prime * result + ((modmailPMs == null) ? 0 : modmailPMs.hashCode());
		result = prime * result + ((scammersToRemove == null) ? 0 : scammersToRemove.hashCode());
		result = prime * result + ((unbans == null) ? 0 : unbans.hashCode());
		result = prime * result + ((userPMs == null) ? 0 : userPMs.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PropagateResult other = (PropagateResult) obj;
		if (action == null) {
			if (other.action != null)
				return false;
		} else if (!action.equals(other.action))
			return false;
		if (bans == null) {
			if (other.bans != null)
				return false;
		} else if (!bans.equals(other.bans))
			return false;
		if (modmailPMs == null) {
			if (other.modmailPMs != null)
				return false;
		} else if (!modmailPMs.equals(other.modmailPMs))
			return false;
		if (scammersToRemove == null) {
			if (other.scammersToRemove != null)
				return false;
		} else if (!scammersToRemove.equals(other.scammersToRemove))
			return false;
		if (unbans == null) {
			if (other.unbans != null)
				return false;
		} else if (!unbans.equals(other.unbans))
			return false;
		if (userPMs == null) {
			if (other.userPMs != null)
				return false;
		} else if (!userPMs.equals(other.userPMs))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "PropagateResult [action=" + action + ", bans=" + bans + ", unbans=" + unbans + ", modmailPMs="
				+ modmailPMs + ", userPMs=" + userPMs + ", scammersToRemove=" + scammersToRemove + "]";
	}
}
