package me.timothy.bots.models;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

import me.timothy.bots.database.MappingDatabase;

/**
 * Describes an action that affects the underlying "lists" that are generated by these mod actions.
 * There is a row that helps determine if a row is up-to-date. This requires an indexed-search on
 * additions and is technically data duplication. However, the improvement to both simplicity of
 * implementation and performance is well worth this ideological trade-off.
 * 
 * @author Timothy
 */
public class USLAction {
	/** The id of the row in the database, or -1 if not yet in database */
	public int id;
	/** 
	 * If this action is effectively *banning* the person or effectively *unbanning* the person. 
	 * 
	 * NOTE:
	 * Even when this is is false, it's still possible that the person HAS SOME TAGS LEFT. For example,
	 * suppose user A is banned with tags "#scammer #sketchy" and somehow we have a system to unban with
	 * just the "#sketchy" tag. Then the entry is going to be 
	 * 
	 * id=ME, isBan=false
	 * USLActionHashtag usl_action_id=ME, hashtag_id=#scammer id
	 * 
	 * Now he is "unbanned" but now he still has the tag "#scammer id".
	 */
	public boolean isBan;
	/** 
	 * If this action is the latest action for this person. If it's not the latest then it's
	 * not required for the purposes of propagating, since we duplicate all the information
	 * at every step for faster processing (which was a serious problem, it was taking literally
	 * days)
	 */
	public boolean isLatest;
	/** The id of the person affected */
	public int personID;
	/**  When this row was added */
	public Timestamp createdAt;
	
	/**
	 * Create a new instance of this USLAction
	 * @param id the id of the row in the database, or -1 if not in the database
	 * @param isBan if this is effectively banning the person or unbanning the person. Should be true if ambiguous
	 * @param isLatest if this is the latest row for the given person id
	 * @param personID the person who was affected by the action
	 * @param createdAt when this row was created
	 */
	public USLAction(int id, boolean isBan, boolean isLatest, int personID, Timestamp createdAt) {
		super();
		this.id = id;
		this.isBan = isBan;
		this.isLatest = isLatest;
		this.personID = personID;
		this.createdAt = createdAt;
	}
	
	/**
	 * If this is a potentially valid row for saving.
	 * @return if this has all the required fields
	 */
	public boolean isValid() {
		return (personID > 0 && createdAt != null);
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((createdAt == null) ? 0 : createdAt.hashCode());
		result = prime * result + id;
		result = prime * result + (isBan ? 1231 : 1237);
		result = prime * result + (isLatest ? 1231 : 1237);
		result = prime * result + personID;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		USLAction other = (USLAction) obj;
		if (createdAt == null) {
			if (other.createdAt != null)
				return false;
		} else if (!createdAt.equals(other.createdAt))
			return false;
		if (id != other.id)
			return false;
		if (isBan != other.isBan)
			return false;
		if (isLatest != other.isLatest)
			return false;
		if (personID != other.personID)
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "USLAction [id=" + id + ", isBan=" + isBan + ", isLatest=" + isLatest + ", personID=" + personID
				+ ", createdAt=" + createdAt + "]";
	}
	
	public String toPrettyString(MappingDatabase db) {
		return "[id=" + id + ", isBan=" + isBan + ", isLatest=" + isLatest + ", person=" + db.getPersonMapping().fetchByID(personID).username 
				+ ", createdAt=" + SimpleDateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(createdAt) + "]";
	}
}
